1. 기존 자바는 듀얼 혹은 쿼드 코어 이상을 지원하는 CPU 중 하나의 코어만을 사용한다.

2. 나머지 코어를 활용하기 위해 스레드를 사용 해야 하지만 스레드는 관리가 어렵고 많은 문제가 발생 할 수 있는 단점이 있다.
이를 위해 자바는 
	자바 1.0 : 스레드, 락, 메모리 모델 지원
	자바 5 : 스레드 풀, 병렬 실행 컬렉션
	자바 7 : 병렬 실행에 도움을 줄 수 있는 포크/조인 프레임워크 제공
등을 지원하고 제공 하였지만 그럼에도 불과하고 쓰기 어려움.

3. 자바 8을 구성하는 핵심 사항으로는
	스트림 API
	메서드에 코드를 전달하는 기법
	인터페이스의 디폴트 메서드에
등이 있다.

4. 자바 8은 데이터베이스 질의 언어에서 표현식을 처리하는 것처럼 병렬 연산을 지원하는 스트림 API를 제공한다.
스트림 API는 최적의 저수준 실행 방법을 선택하는 방식으로 동작한다. 
즉 스트림을 이용하면 에러를 자주 일으키며 멀티코어 CPU를 이용하는 것보다 비용이 훨씬 비싼 키워드 synchronized를 사용하지 않아도 된다.

5. 조금 다른 관점으로 보면 스트림 API 덕분에 
	메서드에 코드를 전달하는 간결 기법(메서드 레퍼런스와 람다)
	인터페이스의 디폴트 메서드
가 추가 되었다.

6. 하지만 스트림 API 때문에 메소드에 코드 전달 기법이 생겼다고 추리하는 것은 해당 기법의 활용성을 제한할 수 있는 위험한 생각이다.
메서드에 코드 전달 기법을 이용하면 새롭고 간결한 동작 파라미터화(behavior prameterization)를 구현할 수 있다.

7. 메서드에 코드를 전달(결과를 반환하고 다른 자료구조로 전달 할 수도 있음.)기법은 함수형 프로그래밍에서 위력을 발휘한다.


참고
synchronized
	멀티코어 CPU의 각 코어는 별도의 캐시(빠른 메모리)를 포함하고 있다. 락을 사용하면 이러한 캐시가 동기화되어야 하므로 속도가 느린
	캐시 일관성 프로토콜 인터코어 통신(cache-coherency-protocol intercore communication)이 이루어진다.	