1. 거의 모든 자바 애플리케이션은 컬렉션을 만들고 활용한다.
하지만 컬렉션으로 모든 문제가 해결되는 것은 아니다.

2. 컬렉션에서는 반복 과정을 직접 처리해야 했다. 즉, for-each 루프를 이용해서 각 요소를 반복하면서 작업을 수행했다.
이런 방식의 반복을 외부 반복(external iteration)이라고 한다.
반면 스트림 API를 이용하면 루프를 신경쓸 필요가 없다. 스트림 API에서는 라이브러리 내부에서 모든 데이터가 처리된다.
이를 내부 반복(internal iteration)이라고 한다.

3. 이론적으로 8개 코어를 가진 컴퓨터라면 8개 코어를 활용해서 병렬로 작업을 수행하여 단일 CPU 컴퓨터에 비해
8배 빨리 작업을 처리할 수 있다. 

부록
	리스트에서 고가의 트랜잭션(거래)만 필터링한 다음에 통화로 결과를 그룹화 한다는 가정의 코드.

	// 그룹화된 트랜잭션을 더함 Map 생성.
	Map<Currency, List<Tran>> tranByCurrencies = new HashMap<>();
	
	// 트랜잭션 리스트 반복.
	for(Tran tran : trans) {
		// 고가의 트랜잭션을 필터링.
		if(tran.getPrice() > 1000) {
			// 트랜잭션의 통화 추출.
			Currency currency = tran.getCurrency();
			
			List<Tran> tranForCurrency = tranByCurrencies.get(currency);
			// 현재 통화의 그룹화된 맵에 항목이 없으면 새로 만든다.
			if(tranForcurrency == null) {
				tranForcurrency = new ArrayList<>();
				
				tranByCurrencies.put(currency, tranForCurrency);
			}
			// 현재 탐색된 트랜잭션을 같은 통화의 트랜잭션 리스트에 추가한다.			
			tranForCurrency.add(tran);
		}
	}
	
	위 코드를 스트림 API로 구현하면
	import static java.util.stream.Collectors.toList;
	Map<Currency, List<Tran>> tranByCurrencies = trans.stream()
		.filter((Tran t) -> t.getPrice() > 1000)
		.collect(groupingBy(Tran::getCurrency));